{"version":3,"sources":["threadmill/hw0/MixedFraction.ts","threadmill/util/random.ts","threadmill/hw0/Ex2.tsx","threadmill/hw0/Ex3.tsx","threadmill/hw0/index.tsx","threadmill/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ALPHABET","StringToNumber","s","base","res","i","length","index","indexOf","substr","toLowerCase","JSON","stringify","ss","FromString","split","console","log","integerPart","fractionPart","enumerator","denominator","Math","pow","ToString","frac","num","num_","floor","rem","reverse","join","NumToString","fracPart","enumerators","push","UniformRandom","a","b","random","Ex2","props","state","_GenerateRandomParams","this","base1","base2","input","isShowingAnswer","style","display","flexDirection","onClick","setState","React","Component","CODE","count","len","Ex3","complement","numberOfBits","output","padding","type","value","onChange","e","target","_COMPLEMENTS_AVAILABLE","map","c","Number","_ShowComplement","complementType","shouldDoComplement","padStart","newRes","hw0","App","exerciseSelected","justifyContent","Object","keys","_HOMEWORKS","hwKey","textAlign","exKey","threadmill","k","j","ComponentToRender","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ad662fe.chunk.js","sourcesContent":["type MixedFraction = {\n  integerPart:number,\n  fractionPart:{\n    enumerator:number,\n    denominator:number,\n  }\n};\n\nexport default MixedFraction;\nexport const ALPHABET = \"0123456789\" + \"abcdefghijklmnopqrstuvwxyz\";\n\nfunction StringToNumber(s:string,base:number):number {\n  let res:number = 0;\n  for(let i = 0; i<s.length;i++) {\n    const index = ALPHABET.indexOf(s.substr(i,1).toLowerCase());\n    if(index<0) {\n      throw JSON.stringify({i,s,ALPHABET,ss:s.substr(i,1).toLowerCase()},null,2);\n    }\n    res = res*base + index;\n  }\n  return res;\n}\nexport function FromString(s:string,base:number):MixedFraction {\n  const split = s.split(\".\");\n  console.log(\"split: %s\",JSON.stringify(split));\n  if(split.length === 1) {\n    return {\n      integerPart:StringToNumber(split[0],base),\n      fractionPart:{\n        enumerator:0,\n        denominator:0,\n      }\n    };\n  } else {\n    return {\n      integerPart:StringToNumber(split[0],base),\n      fractionPart:{\n        enumerator:StringToNumber(split[1],base),\n        denominator:Math.pow(base,split[1].length),\n      }\n    };\n  }\n}\nfunction NumToString(num:number,base:number):string {\n  let res:string = \"\";\n  for(let num_ = num;num_>0;num_=Math.floor(num_/base)) {\n    const rem = num_ % base;\n    res += ALPHABET.substr(rem,1);\n  }\n  return res.split(\"\").reverse().join(\"\");\n}\nexport function ToString(frac:MixedFraction,base:number):string {\n  let res:string = NumToString(frac.integerPart,base);\n  if( frac.fractionPart.enumerator>0 ) {\n    let fracPart:string = \"\";\n    let {enumerator,denominator} = frac.fractionPart;\n    let enumerators:number[] = [enumerator];\n    while( enumerator!=0 ) {\n      enumerator*=base;\n      fracPart += ALPHABET.substr(Math.floor(enumerator/denominator),1);\n      enumerator = enumerator % denominator;\n      if( enumerators.indexOf(enumerator) > 0 ) {\n        enumerators.push(enumerator);\n        break;\n      } else {\n        enumerators.push(enumerator);\n      }\n    }\n    if( enumerator === 0) {\n      res += `.${fracPart}`;\n    } else {\n      const index = enumerators.indexOf(enumerators[enumerators.length-1]);\n      res += `.${fracPart.substr(0,index)}(${fracPart.substr(index,fracPart.length-index-1)})`;\n    }\n  }\n  return res;\n}\nexport function GetIntegerPart(frac:MixedFraction):number {\n  return frac.integerPart;\n}\nexport function FromInteger(x:number):MixedFraction {\n  return {\n    integerPart:x,\n    fractionPart:{\n      enumerator:0,\n      denominator:0,\n    }\n  };\n}\n","export function UniformRandom (a:number,b:number):number {\n  return a+(b-a)*Math.random();\n}\n","import React from \"react\";\nimport MixedFraction,{FromString,ToString,ALPHABET} from \"./MixedFraction\";\nimport {UniformRandom} from \"../util/random\";\n\n\ntype Props = {\n\n};\ntype State = {\n  base1:number,\n  base2:number,\n  input:string,\n  isShowingAnswer:boolean,\n};\n\nexport default class Ex2 extends React.Component<Props,State> {\n  state:State;\n  public static CODE = \"WBgTksGp5ixluAdH9QWx\";\n  constructor(props:Props) {\n    super(props);\n    this.state = Ex2._GenerateRandomParams();\n  }\n  private static _GenerateRandomParams = function ():State  {\n    const base1 = Math.floor(UniformRandom(2,20));\n    let base2:number = base1;\n    let count = 0;\n    for(;base2===base1;base2 = Math.floor(UniformRandom(2,20))) {\n      count++;\n      if(count>=10)\n        break;\n    }\n    let input = \"\";\n    for(let len:number = Math.floor(UniformRandom(2,4)), i:number = 0;i<len;i++) {\n      input += ALPHABET.substr(Math.floor(UniformRandom(0,base1)),1);\n    }\n    input +=\".\";\n    for(let len:number = Math.floor(UniformRandom(2,4)), i:number = 0;i<len;i++) {\n      input += ALPHABET.substr(Math.floor(UniformRandom(0,base1)),1);\n    }\n    return {\n      base1,base2,\n      input,\n      isShowingAnswer:false,\n    }\n  }\n  render() {\n    const {base1,base2,input,isShowingAnswer} = this.state;\n    return (<div style={{\n      display:\"flex\",\n      flexDirection:\"column\",\n    }}>\n        <div>\n          {`Convert ${input} from base ${base1} to base ${base2}.`}\n        </div>\n        {\n          isShowingAnswer && (\n            <>\n            <b>Answer.</b>\n            <div>{ToString(FromString(input,base1),base2)}</div>\n            </>\n          )\n        }\n        <button onClick = {isShowingAnswer?\n          ()=>this.setState(Ex2._GenerateRandomParams()):\n          ()=>this.setState({isShowingAnswer:true})\n        }>\n          {isShowingAnswer ? \"generate another problem\" : \"show answer\"}\n        </button>\n      </div>);\n  }\n}\n","import React from \"react\";\nimport MixedFraction,{FromString,ToString,FromInteger,GetIntegerPart} from \"./MixedFraction\";\n\n\ntype Props = {\n\n};\ntype State = {\n  complement:string,\n  numberOfBits:number,\n  input:string,\n  output:string,\n};\n\nexport default class Ex3 extends React.Component<Props,State> {\n  state:State = {\n    complement:\"2s complement\",\n    numberOfBits:6,\n    input:\"\",\n    output:\"\",\n  };\n  public static CODE = \"FYIOtUApQbNfKgfiMMzN\";\n  private static _COMPLEMENTS_AVAILABLE = [\n    \"2s complement\",\n    \"1s complement\"\n  ]\n  private static _ShowComplement = (input:string,complementType:string,numberOfBits:number) => {\n    const shouldDoComplement = input.substr(0,1) === \"-\";\n    console.log(\"shouldDoComplement: %s\",JSON.stringify({shouldDoComplement,complementType}));\n    let res:string = ToString(FromString(shouldDoComplement ? input.substr(1) : input,10),2);\n    res = res.padStart(numberOfBits,\"0\");\n    if( shouldDoComplement ) {\n      if( complementType === \"2s complement\" ) {\n        let newRes:string = \"\";\n        for(let i = 0; i < res.length; i++) {\n          newRes += (res.substr(i,1)===\"0\" ? \"1\" : \"0\");\n        }\n        res = ToString(FromInteger(GetIntegerPart(FromString(newRes,2))+1),2)\n\n      } else if (complementType === \"1s complement\") {\n        let newRes:string = \"\";\n        for(let i = 0; i < res.length; i++) {\n          newRes += (res.substr(i,1)===\"0\" ? \"1\" : \"0\");\n        }\n        res = newRes;\n      } else {\n        throw complementType;\n      }\n    }\n    return res;\n  }\n  render() {\n    const {complement,numberOfBits,input,output} = this.state;\n    return (<div style={{\n      display:\"flex\",\n      flexDirection:\"column\",\n      padding:\"0 1em 0 1em\",\n    }}>\n      <input type=\"text\" value={this.state.input}\n        onChange={(e)=>this.setState({input:e.target.value})}\n      /> \n      <select value={complement} onChange={(e)=>this.setState({complement:e.target.value})}>\n        {\n          Ex3._COMPLEMENTS_AVAILABLE.map((c)=>{\n            return (<option value={c}>{c}</option>);\n          })\n        }\n      </select>\n      <input type=\"text\" value={this.state.numberOfBits}\n        onChange={(e)=>this.setState({numberOfBits:Number(e.target.value)})}\n      /> \n      <button onClick={()=>this.setState({output:Ex3._ShowComplement(input,complement,numberOfBits)})}>\n        Compute!\n      </button>\n      <span>{output}</span>\n    </div>);\n  }\n}\n","import Ex2 from \"./Ex2\";\nimport Ex3 from \"./Ex3\";\n\nexport default {\n  Ex2,\n  Ex3,\n};\n","import hw0 from \"./hw0\";\n\nexport default {\n  hw0,\n};\n","import React from 'react';\nimport './App.css';\nimport threadmill from \"./threadmill\";\n\n\n//global const's\ntype State = {\n  exerciseSelected?:string,\n};\n\nclass App extends React.Component<{},State> {\n  private static _HOMEWORKS:any = {\n    \"homework 1\":{\n      \"exercise 2\":\"WBgTksGp5ixluAdH9QWx\",\n//      \"exercise 3\":\"FYIOtUApQbNfKgfiMMzN\",\n    }\n  };\n  state:State = {\n  };\n  render() {\n    if( !this.state.exerciseSelected ) {\n      return (\n        <div style={{\n          display:\"flex\",\n          flexDirection:\"column\",\n          justifyContent:\"center\",\n        }}>\n        {\n          Object.keys(App._HOMEWORKS).map(hwKey=>{\n            return (<section style={{\n              textAlign:\"center\",\n            }}>\n              <header>{hwKey}</header>\n              <div style={{\n                display:\"flex\",\n                flexDirection:\"row\",\n                padding:\"0 1em 0 1em\",\n              }}>\n                {\n                  Object.keys(App._HOMEWORKS[hwKey]).map(exKey=>{\n                    return (<button onClick={()=>this.setState({exerciseSelected:App._HOMEWORKS[hwKey][exKey]})}>\n                      {exKey}\n                    </button>);\n                  })\n                }\n              </div>\n            </section>);\n          })\n        }\n        </div>\n      );\n    } else {\n//      return (<h1>no such exercise as {this.state.exerciseSelected}</h1>);\n      const keys:string[] = Object.keys(threadmill as any);\n      for(let i = 0; i < keys.length; i++) {\n        var k:string[] = Object.keys((threadmill as any)[keys[i]]);\n        for(let j = 0; j < k.length;j++) {\n          if((threadmill as any)[keys[i]][k[j]].CODE === this.state.exerciseSelected) {\n            const ComponentToRender = (threadmill as any)[keys[i]][k[j]];\n            return (<ComponentToRender/>);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}